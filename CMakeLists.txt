set(CMAKE_LEGACY_CYGWIN_WIN32 0)

project(cura-build)

cmake_minimum_required(VERSION 2.8.12)

include(ExternalProject)
include(GNUInstallDirs)

if(APPLE)
   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.7")
endif()

option(BUILD_PYTHON "Include Python" OFF)
option(BUILD_QT "Include Qt" OFF)
option(BUILD_PYQT "Include PyQt" OFF)
option(BUILD_NUMPY "Include Numpy" OFF)
option(BUILD_PYSERIAL "Include PySerial" OFF)

if(APPLE)
    set(BUILD_PYTHON ON)
    set(BUILD_QT ON)
    set(BUILD_PYQT ON)
    set(BUILD_NUMPY ON)
    set(BUILD_PYSERIAL ON)
endif()

set(CURA_MAJOR_VERSION "15")
set(CURA_MINOR_VERSION "06")
set(CURA_PATCH_VERSION "03")

set(TAG_OR_BRANCH "15.06" CACHE STRING "The name of the tag or branch to build")
set(EXTERNALPROJECT_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/inst)
set(EXTERNALPROJECT_SITEPACKAGES_DIR ${EXTERNALPROJECT_INSTALL_PREFIX}/lib/python3.4/site-packages)

if(BUILD_PYTHON)
    ExternalProject_Add(Python
        URL https://www.python.org/ftp/python/3.4.3/Python-3.4.3.tgz
        CONFIGURE_COMMAND ./configure --prefix=${EXTERNALPROJECT_INSTALL_PREFIX} --enable-shared --with-threads --without-pymalloc
        BUILD_IN_SOURCE 1
    )
    set(PYTHON_EXECUTABLE ${EXTERNALPROJECT_INSTALL_PREFIX}/bin/python3)
    set(PYTHON_LIBRARIES ${EXTERNALPROJECT_INSTALL_PREFIX}/lib)
else()
    find_package(PythonInterp 3.0.0 REQUIRED)
    find_package(PythonLibs 3.0.0 REQUIRED)
    add_custom_target(Python)
endif()

if(BUILD_QT)
    ExternalProject_Add(Qt
        URL http://download.qt.io/official_releases/qt/5.4/5.4.1/single/qt-everywhere-opensource-src-5.4.1.tar.gz
        CONFIGURE_COMMAND ./configure -release -prefix ${EXTERNALPROJECT_INSTALL_PREFIX} -archdatadir ${EXTERNALPROJECT_INSTALL_PREFIX}/lib -datadir ${EXTERNALPROJECT_INSTALL_PREFIX}/share -opensource -confirm-license -no-framework -nomake examples -nomake tests -skip qtconnectivity -skip qtdoc -skip qtenginio -skip qtlocation -skip qtmultimedia -skip qtquick1 -skip qtscript -skip qtscript -skip qtsensors -skip qtwebchannel -skip qtwebengine -skip qtwebkit -skip qtwebsockets -skip qtx11extras -skip qtandroidextras -skip qtactiveqt -skip qttools -skip qtwinextras -skip qtxmlpatterns
        BUILD_IN_SOURCE 1
    )
else()
    find_package(Qt5 5.4 REQUIRED COMPONENTS Core Gui Widgets Quick)
    add_custom_target(Qt)
endif()

if(BUILD_PYQT)
    ExternalProject_Add(Sip
        DEPENDS Python
        URL http://downloads.sourceforge.net/project/pyqt/sip/sip-4.16.7/sip-4.16.7.tar.gz
        CONFIGURE_COMMAND ${PYTHON_EXECUTABLE} configure.py --sysroot ${EXTERNALPROJECT_INSTALL_PREFIX}
        BUILD_IN_SOURCE 1
    )

    ExternalProject_Add(PyQt
        DEPENDS Python Qt Sip
        URL http://downloads.sourceforge.net/project/pyqt/PyQt5/PyQt-5.4.1/PyQt-gpl-5.4.1.tar.gz
        CONFIGURE_COMMAND ${PYTHON_EXECUTABLE} configure.py --sysroot ${EXTERNALPROJECT_INSTALL_PREFIX} --qmake ${EXTERNALPROJECT_INSTALL_PREFIX}/bin/qmake --sip ${EXTERNALPROJECT_INSTALL_PREFIX}/bin/sip --confirm-license
        BUILD_IN_SOURCE 1
    )
else()
    add_custom_target(PyQt)
endif()

if(BUILD_NUMPY)
    ExternalProject_Add(Numpy
        DEPENDS Python
        URL http://downloads.sourceforge.net/project/numpy/NumPy/1.9.2/numpy-1.9.2.tar.gz
        CONFIGURE_COMMAND ""
        BUILD_COMMAND ${PYTHON_EXECUTABLE} setup.py build
        INSTALL_COMMAND ${PYTHON_EXECUTABLE} setup.py install
        BUILD_IN_SOURCE 1
    )
endif()

if(BUILD_PYSERIAL)
    ExternalProject_Add(PySerial
        DEPENDS Python
        URL https://pypi.python.org/packages/source/p/pyserial/pyserial-2.7.tar.gz
        CONFIGURE_COMMAND ""
        BUILD_COMMAND ${PYTHON_EXECUTABLE} setup.py build
        INSTALL_COMMAND ${PYTHON_EXECUTABLE} setup.py install
        BUILD_IN_SOURCE 1
    )
endif()

ExternalProject_Add(Protobuf
    GIT_REPOSITORY https://github.com/ultimaker/protobuf
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNALPROJECT_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Release -DINSTALL_PYTHON=OFF -DBUILD_STATIC=ON
)

if(NOT WIN32)
    ExternalProject_Add(Protobuf-python
       DEPENDS Python Protobuf
       GIT_REPOSITORY https://github.com/ultimaker/protobuf
       #CONFIGURE_COMMAND wget https://bootstrap.pypa.io/ez_setup.py -O - | ${PYTHON_EXECUTABLE}
       BUILD_COMMAND cd python && PROTOC=${EXTERNALPROJECT_INSTALL_PREFIX}/bin/protoc ${PYTHON_EXECUTABLE} setup.py build
       INSTALL_COMMAND cd python && export PYTHONPATH=${EXTERNALPROJECT_SITEPACKAGES_DIR} && ${PYTHON_EXECUTABLE} setup.py install --single-version-externally-managed --prefix=${EXTERNALPROJECT_INSTALL_PREFIX} --record=${CMAKE_BINARY_DIR}/protobuf.log
       BUILD_IN_SOURCE 1
    )
endif()

ExternalProject_Add(Arcus
    DEPENDS Python Protobuf
    GIT_REPOSITORY https://github.com/DeskboxBrazil/libArcus
    GIT_TAG ${TAG_OR_BRANCH}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNALPROJECT_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_STATIC=ON
)

ExternalProject_Add(CuraEngine
    DEPENDS Arcus
    GIT_REPOSITORY https://github.com/DeskboxBrazil/CuraEngine
    GIT_TAG ${TAG_OR_BRANCH}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNALPROJECT_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Release
)

ExternalProject_Add(Uranium
    DEPENDS PyQt Arcus
    GIT_REPOSITORY https://github.com/DeskboxBrazil/Uranium
    GIT_TAG ${TAG_OR_BRANCH}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNALPROJECT_INSTALL_PREFIX}
)

ExternalProject_Add(Cura
    DEPENDS Uranium CuraEngine
    GIT_REPOSITORY https://github.com/DeskboxBrazil/Cura
    GIT_TAG ${TAG_OR_BRANCH}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNALPROJECT_INSTALL_PREFIX} -DURANIUM_SCRIPTS_DIR=
)

ExternalProject_Add(cura-binary-data
    DEPENDS Cura
    GIT_REPOSITORY https://github.com/DeskboxBrazil/cura-binary-data
    GIT_TAG ${TAG_OR_BRANCH}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNALPROJECT_INSTALL_PREFIX}
)

if(APPLE)
    ExternalProject_Add(Py2App
        DEPENDS Python
        URL https://pypi.python.org/packages/source/p/py2app/py2app-0.9.tar.gz
        CONFIGURE_COMMAND wget https://bootstrap.pypa.io/ez_setup.py -O - | ${PYTHON_EXECUTABLE}
        BUILD_COMMAND ${PYTHON_EXECUTABLE} setup.py build
        INSTALL_COMMAND ${PYTHON_EXECUTABLE} setup.py install
        BUILD_IN_SOURCE 1
    )
endif()

# Packaging

set(CPACK_PACKAGE_NAME "Cura")
set(CPACK_PACKAGE_VENDOR "Deskbox")
set(CPACK_PACKAGE_VERSION_MAJOR ${CURA_MAJOR_VERSION})
set(CPACK_PACKAGE_VERSION_MINOR ${CURA_MINOR_VERSION})
set(CPACK_PACKAGE_VERSION_PATCH ${CURA_PATCH_VERSION})
set(CPACK_PACKAGE_VERSION ${CURA_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Cura 3D Printing Software")
set(CPACK_PACKAGE_CONTACT "Martin Elsner <martin.elsner@gmail.com>")
if(NOT APPLE)
    set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/LICENSE)
endif()
set(CPACK_PACKAGE_EXECUTABLES Cura "Cura ${CURA_MAJOR_VERSION}.${CURA_MINOR_VERSION}.${CURA_PATCH_VERSION}")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "Cura ${CURA_MAJOR_VERSION}.${CURA_MINOR_VERSION}")
set(CPACK_MODULE_PATH ${CPACK_MODULE_PATH} ${CMAKE_SOURCE_DIR})
set(CPACK_PACKAGE_FILE_NAME "CuraDeskbox")

if(APPLE)

    configure_file(setup_osx.py.in setup_osx.py @ONLY)

    add_custom_command(
        OUTPUT ${CMAKE_BINARY_DIR}/dist/Deskbox.app
        COMMAND ${PYTHON_EXECUTABLE}
        ARGS setup_osx.py py2app
        COMMENT "Running py2app"
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )

    add_custom_target(build_app ALL DEPENDS ${CMAKE_BINARY_DIR}/dist/Deskbox.app)
    install(DIRECTORY ${CMAKE_BINARY_DIR}/dist/Deskbox.app DESTINATION "." USE_SOURCE_PERMISSIONS)

    set(CPACK_GENERATOR "DragNDrop")

elseif(WIN32)

    get_filename_component(compiler_dir ${CMAKE_CXX_COMPILER} DIRECTORY)
    configure_file(setup_win32.py.in setup_win32.py @ONLY)

    add_custom_target(build_exe ALL)
    add_dependencies(build_exe cura-binary-data)

    add_custom_command(
        TARGET build_exe PRE_LINK
        COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/dist
        COMMENT "Cleaning old dist/ directory"
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )
    add_custom_command(
        TARGET build_exe POST_BUILD
        COMMAND ${PYTHON_EXECUTABLE} setup_win32.py py2exe
        COMMENT "Running py2exe"
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )

    install(DIRECTORY ${CMAKE_BINARY_DIR}/dist/ DESTINATION "." USE_SOURCE_PERMISSIONS COMPONENT "cura")

    install(DIRECTORY arduino DESTINATION "." COMPONENT "arduino")

    include(CPackComponent)
    cpack_add_component(cura DISPLAY_NAME "Cura Executable and Data Files" REQUIRED)
    cpack_add_component(arduino DISPLAY_NAME "Install Arduino Drivers")

    set(CPACK_GENERATOR "NSIS")
    set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
    set(CPACK_NSIS_EXECUTABLES_DIRECTORY ".")
    set(CPACK_NSIS_MUI_FINISHPAGE_RUN "Cura.exe")

elseif(CYGWIN)
    # Not yet decided - probably pyinstaller + NSIS

else()
    set(CPACK_GENERATOR "DEB")

    set(CPACK_INSTALL_CMAKE_PROJECTS
        "${CMAKE_BINARY_DIR}/CuraEngine-prefix/src/CuraEngine-build;CuraEngine;ALL;/usr"
        "${CMAKE_BINARY_DIR}/Uranium-prefix/src/Uranium-build;Uranium;ALL;/usr"
        "${CMAKE_BINARY_DIR}/Cura-prefix/src/Cura-build;Cura;ALL;/usr"
        "${CMAKE_BINARY_DIR}/cura-binary-data-prefix/src/cura-binary-data-build;cura-binary-data;ALL;/usr"
    )
    set(CPACK_INSTALLED_DIRECTORIES
        "${CMAKE_BINARY_DIR}/inst/lib/python3.4/site-packages/google;/usr/lib/python3/dist-packages/google"
        "${CMAKE_BINARY_DIR}/inst/lib/python3/dist-packages/Arcus;/usr/lib/python3/dist-packages/Arcus"
    )

    set(RPM_REQUIRES
        "python3 >= 3.4.0"
        "python3-qt5 >= 5.4.0"
        "python3-numpy >= 1.9.0"
        "qt5-qtquickcontrols >= 5.4.0"
    )
    string(REPLACE ";" "," RPM_REQUIRES "${RPM_REQUIRES}")
    set(CPACK_RPM_PACKAGE_REQUIRES ${RPM_REQUIRES})
    set(CPACK_RPM_PACKAGE_RELOCATABLE OFF)

    set(DEB_DEPENDS
        "python3 (>= 3.4.0)"
        "python3-pyqt5 (>= 5.4.0)"
        "python3-pyqt5.qtopengl (>= 5.4.0)"
        "python3-pyqt5.qtquick (>= 5.4.0)"
        "python3-pyqt5.qtsvg (>= 5.4.0)"
        "python3-numpy (>= 1.8.0)"
        "python3-serial (>= 2.6)"
        "qml-module-qtquick2 (>= 5.4.0)"
        "qml-module-qtquick-window2 (>= 5.4.0)"
        "qml-module-qtquick-layouts (>= 5.4.0)"
        "qml-module-qtquick-dialogs (>= 5.4.0)"
        "qml-module-qtquick-controls (>= 5.4.0)"
    )
    string(REPLACE ";" "," DEB_DEPENDS "${DEB_DEPENDS}")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS ${DEB_DEPENDS})
    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64)

endif()

include(CPack)
